polykinds Data.Functor.Const.Const k
data kinds Data.Functor.Const.Const Type, k

add Data.Functor.Const Instance Unpeel_Const (k a : Type) (b : k) : GHC.Prim.Unpeel (Const k a b) a := GHC.Prim.Build_Unpeel _ _ getConst Mk_Const.

# Avoid wrong type variable names in argument to coerce
# TODO: ScopedTypeVariables
redefine Local Definition Data.Functor.Const.Applicative__Const_op_zlztzg__ {inst_m} `{GHC.Base.Monoid inst_m}
   : forall {a} {b}, Const Type inst_m (a -> b) -> Const Type inst_m a -> Const Type inst_m b :=
  fun {a} {b} => GHC.Prim.coerce GHC.Base.mappend.

order Data.Functor.Const.Eq___Const Data.Functor.Const.Ord__Const
order Data.Functor.Const.Semigroup__Const Data.Functor.Const.Monoid__Const

delete unused type variables Data.Functor.Const.Eq___Const
delete unused type variables Data.Functor.Const.Ord__Const
delete unused type variables Data.Functor.Const.Semigroup__Const
delete unused type variables Data.Functor.Const.Monoid__Const

order Unpeel_Const Data.Functor.Const.Eq___Const_op_zeze__

order Data.Functor.Const.Functor__Const Data.Functor.Const.Applicative__Const_op_ztzg__
